 ██████╗ ██████╗ ███████╗███╗   ██╗    ██╗  ██╗ █████╗ ███████╗██╗  ██╗██╗███╗   ██╗ ██████╗ 
██╔═══██╗██╔══██╗██╔════╝████╗  ██║    ██║  ██║██╔══██╗██╔════╝██║  ██║██║████╗  ██║██╔════╝ 
██║   ██║██████╔╝█████╗  ██╔██╗ ██║    ███████║███████║███████╗███████║██║██╔██╗ ██║██║  ███╗
██║   ██║██╔═══╝ ██╔══╝  ██║╚██╗██║    ██╔══██║██╔══██║╚════██║██╔══██║██║██║╚██╗██║██║   ██║
╚██████╔╝██║     ███████╗██║ ╚████║    ██║  ██║██║  ██║███████║██║  ██║██║██║ ╚████║╚██████╔╝
 ╚═════╝ ╚═╝     ╚══════╝╚═╝  ╚═══╝    ╚═╝  ╚═╝╚═╝  ╚═╝╚══════╝╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝ ╚═════╝ 



// COMO DEFINIR EL TAMAÑO DEL ARRAY SI NO ESTA CREADO?
/*
- primero ves cuantos datos son, si son pocos, vas por orden lineal, si son muchos vas por orden cuadratico.
 - dependiendo el orden que elijas, sera el tamaño de la tabla y como vas a buscar e insertar, etc.

// ORDEN LINEAL
 - cantidad de claves / factor de carga (k/0.9) > esto te da el tamaño del array

// ORDEN CUADRATICO
 - cantidad de claves / factor de carga (k/0.5) > esto te da un numero, si es primo usas ese, si no es primo, contas desde ese numero hasta dar con uno y usas ese
*/

// ------------------------------------//

		// PSEUDO PARA INSERTAR EN OPEN HASHING CON ORDEN LINEAL //
// se parte de una tabla vacia
// se entiende que todas las claves son diferentes y el resultado de h es siempre diferente.

// ------------------------------------//

TTablaHASH.Insertar(clave k)
T indica el vector de claves
i = 0 									// comienzo desde el indice 0 de la tabla
	repetir 							// recursion
	j = h(k,i) 							// resultado de h, almacenado en j, que es la funcion de hash
	si vacio(T[j]) entonces 			// si el indice en el que estoy parado es vacio
		T[j] = k, devolver j, salir 	// asigno el valor del resultado de la tabla a ese indice
	sino, i = i + 1  					// sino, paso al siguiente indice
	hasta que i = m 					// cuando ya no tengo mas indices, siendo m el ultimo valor de la tabla
	error “sobrecarga de tabla de hash 	//cuando ya recorri y no tengo indices vacios

// ------------------------------------//
		// JAVA PARA INSERTAR EN OPEN HASHING CON ORDEN LINEAL //

		// SE PARTE DE UNA TABLA QUE ESTA VACIA
		// ESTO NO TIENE CONTEMPLADO SI HAY COLISIONES
		// puedo inicializar la tabla si no esta inicializada, la tabla vacia por supuesto

// ------------------------------------//

	// METODO PARA CREAR LA TABLA 


public class TablaHash {
    private Integer[] tabla; 			// array de claves (tabla hash)
    private int m; 						// Tamaño de la tabla

    public TablaHash(int tamano) {
        this.m = tamano;
        this.tabla = new Integer[m]; 	// Inicializamos la tabla con nulls (vacía)

    }
}

// ------------------------------------//

	// FUNCION HASH DE EJEMPLO PARA OPEN HASHING //

// ------------------------------------//

// Función hash doble con sonda lineal como ejemplo (puedes cambiar h(k, i) según el método que uses)
private int h(int clave, int i) {
    // Ejemplo de función de sonda lineal: (hash_base + i) % m
    int hash_base = clave % m;
    return (hash_base + i) % m;
}

// ------------------------------------//

// METODO INSERTAR PARA OPEN HASHING CON ORDEN LINEAL
// se parte de una tabla vacia

// ------------------------------------//
/**
 * Inserta una clave en la tabla hash
 * @param clave La clave que se desea insertar
 * @return La posición j donde se insertó la clave
 * @throws RuntimeException si la tabla está llena
 */
public int insertar(int clave) {
    int i = 0;

    								
    while (i < m) {					// Intentamos insertar la clave en la tabla, como máximo m intentos
        int j = h(clave, i); 		// Calculamos la posición j con la función hash
        if (tabla[j] == null) {		// si la posicion esta vacia
            tabla[j] = clave;		// insertamos la clave
            return j; 				// Devolvemos la posición donde se insertó
        } else {					// si ya hay una clave 
            i++;					// aumentamos i y reintentamos
        }
    }

    // Si no encontramos espacio después de m intentos, lanzamos un error
    throw new RuntimeException("Error: sobrecarga de tabla de hash");
}

// Método para imprimir la tabla (opcional, útil para pruebas)
public void imprimir() {
    for (int i = 0; i < m; i++) {
        System.out.println("Posición " + i + ": " + tabla[i]);

// ------------------------------------//

// PSEUDO BUSCAR EN OPEN HASHING CON ORDEN LINEAL

// ------------------------------------//

TTablaHASH.Buscar(clave k)
// T indica el vector de claves
i = 0 									// comienzo a buscar desde el inicio de la tabla
repetir 								// recursion
	j = h(k,i) 							// almaceno el valor del resultado del hash en j
	si T[j] = k entonces 				// si el valor de la clave en el indice es k (significa que la comparacion es k=k)
	devolver j, salir 					// devuelvo el valor 
	sino, i = i + 1 					// si no, paso al siguiente indice
	hasta que vacio(T[j]) o i = m  		// hasta encontrar el valor que estoy buscando, o hasta llegar al final de la tabla
	devolver nulo 						// devuelvo nulo o puedo imprimir "no se encontro el valor"

// ------------------------------------//

		// JAVA PARA BUSCAR EN OPEN HASHING CON ORDEN LINEAL
	// SE ENTIENDE QUE LA TABLA ESTA LLENA

// ------------------------------------//

public int buscar(int clave) {
    int i = 0;
    while (i < m) {						// Repetimos mientras no encontremos una celda vacía o se acaben los intentos
        int j = h(clave, i); 			// Calculamos la posición usando la función de hash y lo almacenamos en j
        if (tabla[j] == null) {			// Si la celda está vacía, la clave no está en la tabla
            return -1;
        }
        if (tabla[j] == clave) {		// Si encontramos la clave
            return j;					// devolvemos su posición
        }
        i++;							// Si no es la clave y la celda no está vacía, seguimos buscando
    }
    return -1; 							// Si terminamos el ciclo sin encontrar la clave, devolvemos -1
}

// --- PSEUDO PARA BUSCAR E IMPRIMIR CUANTAS COMPARACIONES REALICE -- //

TTablaHASH.Buscar(clave k)
// T indica el vector de claves
i = 0 									// comienzo a buscar desde el inicio de la tabla
x = 0									// contador de comparaciones
repetir 								// recursion
	j = h(k,i) 							// almaceno el valor del resultado del hash en j
	si T[j] = k entonces 				// si el valor de la clave en el indice es k (significa que la comparacion es k=k)
	x ++								// aumento x
	devolver j && x, salir 				// devuelvo el valor y cuantas comparaciones realice para encontrarlo
	sino, i = i + 1 					// si no, paso al siguiente indice
	hasta que vacio(T[j]) o i = m  		// hasta encontrar el valor que estoy buscando, o hasta llegar al final de la tabla
	devolver -1 && x 					// devuelvo -1 y cuantas comparaciones realice en total, seria el tamano del array pero bueno.

// --- PSEUDO PARA insertar E IMPRIMIR CUANTAS COMPARACIONES REALICE -- //
TTablaHASH.Insertar(clave k)
T indica el vector de claves
i = 0 										// comienzo desde el indice 0 de la tabla
x = 0										// contador de comparaciones
	repetir 								// recursion
	j = h(k,i) 								// resultado de h, almacenado en j, que es la funcion de hash
	si vacio(T[j]) entonces 				// si el indice en el que estoy parado es vacio
		x ++								// aumento el valor de x primero
		T[j] = k, devolver j && x, salir 	// asigno el valor del resultado de la tabla a ese indice y muestro cuantas comparaciones hice
	sino, i = i + 1  						// sino, paso al siguiente indice
	x ++									// aumento x
	hasta que i = m 						// cuando ya no tengo mas indices, siendo m el ultimo valor de la tabla
	devolver x								// devuelvo cuantas comparaciones realice
	error "sobrecarga de tabla de hash" 	// cuando ya recorri y no tengo indices vacios







██████╗ ██╗     ██╗██╗  ██╗███████╗████████╗██████╗  █████╗     ██╗███████╗    ██████╗  █████╗ ██╗███╗   ██╗
██╔══██╗██║     ██║██║ ██╔╝██╔════╝╚══██╔══╝██╔══██╗██╔══██╗    ██║██╔════╝    ██╔══██╗██╔══██╗██║████╗  ██║
██║  ██║██║     ██║█████╔╝ ███████╗   ██║   ██████╔╝███████║    ██║███████╗    ██████╔╝███████║██║██╔██╗ ██║
██║  ██║██║██   ██║██╔═██╗ ╚════██║   ██║   ██╔══██╗██╔══██║    ██║╚════██║    ██╔═══╝ ██╔══██║██║██║╚██╗██║
██████╔╝██║╚█████╔╝██║  ██╗███████║   ██║   ██║  ██║██║  ██║    ██║███████║    ██║     ██║  ██║██║██║ ╚████║
╚═════╝ ╚═╝ ╚════╝ ╚═╝  ╚═╝╚══════╝   ╚═╝   ╚═╝  ╚═╝╚═╝  ╚═╝    ╚═╝╚══════╝    ╚═╝     ╚═╝  ╚═╝╚═╝╚═╝  ╚═══╝
                                                                                                                                                                                    
                                                                               

                                        


	/*
	IMPLEMENTAR EL DIJKSTRA PASO A PASO SIN MORIR EN EL INTENTO
	1 - hacer el pseudo del dijkstra
	2 - hacer el pseudo del grafo a generar
	3 - hacer el java para el grafo a generar, sin el dijkstra, si nos lo dan, mejor
	4 - usar el java del dijkstra con los cosos del java del grafo
	*/

// ------------------------------------//
		// PSEUDO DEL DIJKSTRA
// ------------------------------------//


	Dijkstra(G, s)
para cada nodo v en G hacer
	distancia[v] = ∞				// inicializo todas las distancias en infinito
	predecesor[v] = indefinido		// aún no se conocen los caminos

distancia[s] = 0					// la distancia al nodo origen es 0
Q = conjunto de todos los nodos de G	// nodos aún no visitados

mientras Q no esté vacío hacer
	u = nodo en Q con menor distancia[u]	// selecciono el nodo más cercano
	remover u de Q							// lo marco como visitado

	para cada vecino v de u hacer
		si v está en Q entonces
			alt = distancia[u] + peso(u,v)	// distancia alternativa pasando por u
			si alt < distancia[v] entonces
				distancia[v] = alt			// actualizo la distancia más corta
				predecesor[v] = u			// actualizo el camino más corto


// ------------------------------------//

				// ------------------------------------//
		// JAVA DEL DIJKSTRA
				// codigo generico del algoritmo
// ------------------------------------//


				import java.util.*;

class Arista {
    String destino;
    int peso;

    public Arista(String destino, int peso) {
        this.destino = destino;
        this.peso = peso;
    }
}

class Grafo {
    Map<String, List<Arista>> adyacencias = new HashMap<>();

    public void agregarNodo(String nodo) {
        adyacencias.putIfAbsent(nodo, new ArrayList<>());
    }

    public void agregarArista(String origen, String destino, int peso) {
        adyacencias.putIfAbsent(origen, new ArrayList<>());
        adyacencias.putIfAbsent(destino, new ArrayList<>()); // importante para nodos sin salida
        adyacencias.get(origen).add(new Arista(destino, peso));
    }

    public Map<String, Integer> dijkstra(String origen) {
        Map<String, Integer> distancias = new HashMap<>();
        Map<String, String> predecesores = new HashMap<>();
        PriorityQueue<NodoDistancia> cola = new PriorityQueue<>();
        Set<String> visitados = new HashSet<>();

        for (String nodo : adyacencias.keySet()) {
            distancias.put(nodo, Integer.MAX_VALUE);
        }
        distancias.put(origen, 0);
        cola.add(new NodoDistancia(origen, 0));

        while (!cola.isEmpty()) {
            NodoDistancia actual = cola.poll();
            String nodoActual = actual.nodo;

            if (visitados.contains(nodoActual)) continue;
            visitados.add(nodoActual);

            for (Arista arista : adyacencias.getOrDefault(nodoActual, new ArrayList<>())) {
                String vecino = arista.destino;
                int nuevaDistancia = distancias.get(nodoActual) + arista.peso;

                if (nuevaDistancia < distancias.get(vecino)) {
                    distancias.put(vecino, nuevaDistancia);
                    predecesores.put(vecino, nodoActual);
                    cola.add(new NodoDistancia(vecino, nuevaDistancia));
                }
            }
        }

        return distancias; // O devolvé también predecesores si querés reconstruir caminos
    }

    // Método opcional para reconstruir el camino mínimo
    public List<String> reconstruirCamino(String origen, String destino, Map<String, String> predecesores) {
        LinkedList<String> camino = new LinkedList<>();
        String actual = destino;
        while (actual != null && !actual.equals(origen)) {
            camino.addFirst(actual);
            actual = predecesores.get(actual);
        }
        if (actual == null) return Collections.emptyList(); // No hay camino
        camino.addFirst(origen);
        return camino;
    }
}

class NodoDistancia implements Comparable<NodoDistancia> {
    String nodo;
    int distancia;

    public NodoDistancia(String nodo, int distancia) {
        this.nodo = nodo;
        this.distancia = distancia;
    }

    @Override
    public int compareTo(NodoDistancia otro) {
        return Integer.compare(this.distancia, otro.distancia);
    }
}




// ------------------------------------//
		// PSEUDO PARA GENERAR EL GRAFO DE LAS CIUDADES
// ------------------------------------//

Grafo.Inicializar()
	conjunto_nodos = [MVD, CAN, DUR, FLO, COL, PDE, RO, ART]
	para cada nodo v en conjunto_nodos hacer
		G[v] = lista vacía 				// inicializo la lista de adyacencia

Grafo.AgregarAristas()
	agregar (CAN, 30) a G[MVD]
	agregar (DUR, 170) a G[CAN]
	agregar (DUR, 60) a G[FLO]
	agregar (MVD, 180) a G[COL]
	agregar (PDE, 130) a G[MVD]
	agregar (RO, 90) a G[PDE]
	agregar (MVD, 270) a G[RO]
	agregar (ART, 700) a G[MVD]
	agregar (PDE, 90) a G[CAN]
	agregar (COL, 200) a G[CAN]
	agregar (ART, 500) a G[CAN]
	agregar (RO, 400) a G[ART]



G[MVD] = [(CAN, 30), (PDE, 130), (ART, 700)]
G[CAN] = [(DUR, 170), (PDE, 90), (COL, 200), (ART, 500)]
G[FLO] = [(DUR, 60)]
G[COL] = [(MVD, 180)]
G[PDE] = [(RO, 90)]
G[RO]  = [(MVD, 270)]
G[ART] = [(RO, 400)]



// ------------------------------------//
		// JAVA PARA GENERAR EL GRAFO DE LAS CIUDADES
// esto todavia no tiene el dijkstra
// ------------------------------------//

import java.util.*;

class Arista {
    String destino;
    int peso;

    Arista(String destino, int peso) {
        this.destino = destino;
        this.peso = peso;
    }

    @Override
    public String toString() {
        return "(" + destino + ", " + peso + ")";
    }
}

public class Grafo {
    Map<String, List<Arista>> adyacencias;

    public Grafo() {
        adyacencias = new HashMap<>();
        inicializarNodos();
        agregarAristas();
    }

    private void inicializarNodos() {
        String[] nodos = {"MVD", "CAN", "DUR", "FLO", "COL", "PDE", "RO", "ART"};
        for (String nodo : nodos) {
            adyacencias.put(nodo, new ArrayList<>());
        }
    }

    private void agregarAristas() {
        adyacencias.get("MVD").add(new Arista("CAN", 30));
        adyacencias.get("CAN").add(new Arista("DUR", 170));
        adyacencias.get("FLO").add(new Arista("DUR", 60));
        adyacencias.get("COL").add(new Arista("MVD", 180));
        adyacencias.get("MVD").add(new Arista("PDE", 130));
        adyacencias.get("PDE").add(new Arista("RO", 90));
        adyacencias.get("RO").add(new Arista("MVD", 270));
        adyacencias.get("MVD").add(new Arista("ART", 700));
        adyacencias.get("CAN").add(new Arista("PDE", 90));
        adyacencias.get("CAN").add(new Arista("COL", 200));
        adyacencias.get("CAN").add(new Arista("ART", 500));
        adyacencias.get("ART").add(new Arista("RO", 400));
    }

    public void imprimirGrafo() {
        for (String nodo : adyacencias.keySet()) {
            System.out.println(nodo + " -> " + adyacencias.get(nodo));
        }
    }

    public static void main(String[] args) {
        Grafo grafo = new Grafo();
        grafo.imprimirGrafo();
    }
}


// ------------------------------------//
		// JAVA PARA IMPLEMENTAR EL DIJKSTRA AL GRAFO DE LAS CIUDADES
// esto pertenece a la clase grafo, al final de la clase
// ------------------------------------//


public Map<String, Integer> dijkstra(String origen) {
    Map<String, Integer> distancias = new HashMap<>();
    Set<String> visitados = new HashSet<>();
    PriorityQueue<NodoDistancia> cola = new PriorityQueue<>();

    // Inicializar todas las distancias a infinito, excepto el origen
    for (String nodo : adyacencias.keySet()) {
        distancias.put(nodo, Integer.MAX_VALUE);
    }
    distancias.put(origen, 0);
    cola.add(new NodoDistancia(origen, 0));

    while (!cola.isEmpty()) {
        NodoDistancia actual = cola.poll();
        String nodoActual = actual.nodo;

        if (visitados.contains(nodoActual)) continue;
        visitados.add(nodoActual);

        for (Arista arista : adyacencias.get(nodoActual)) {
            String vecino = arista.destino;
            int peso = arista.peso;
            int nuevaDistancia = distancias.get(nodoActual) + peso;

            if (nuevaDistancia < distancias.get(vecino)) {
                distancias.put(vecino, nuevaDistancia);
                cola.add(new NodoDistancia(vecino, nuevaDistancia));
            }
        }
    }

    return distancias;
}

// Clase auxiliar para la cola de prioridad
class NodoDistancia implements Comparable<NodoDistancia> {
    String nodo;
    int distancia;

    NodoDistancia(String nodo, int distancia) {
        this.nodo = nodo;
        this.distancia = distancia;
    }

    @Override
    public int compareTo(NodoDistancia otro) {
        return Integer.compare(this.distancia, otro.distancia);
    }
}

// todavia queda implementar en el main


// ------------------------------------//
		// AL FINAL SE AGREGA EN EL MAIN LA LOGICA DEL DIJKSTRA
// ------------------------------------//

public static void main(String[] args) {
    Grafo grafo = new Grafo();
    grafo.imprimirGrafo();

    System.out.println("\nDistancias mínimas desde MVD:");
    Map<String, Integer> distancias = grafo.dijkstra("MVD");
    for (String nodo : distancias.keySet()) {
        System.out.println(nodo + ": " + distancias.get(nodo));
    }
}

